# ecc-acc

This is an implementation of a cryptographic accumulator over elliptic curves.

Features:

* __Constant time accumulation__: Updating the accumulation does not require access
to all previously accumulated values.
* __Constant size accumulation__: Components of the accumulation are constant size.
* __Trustless proofs__: An untrusted prover may compute a witness of membership
for any accumulated element without knowledge of any sensitive information.
* ~~Constant time witness updates~~: Trustless witness updates are O(n^2).

## Setup

```shell
$ git clone https://github.com/johnoliverdriscoll/ecc-acc
$ cd ecc-acc
$ npm install
```

## Tutorial

There are two classes in this module. The first is [Accumulator](#Accumulator),
which represents a trusted party that is able to add and delete elements from an
accumulation as well as verify an element's membership. Constructing an accumulator
requires the parameters for an elliptic curve and an optional secret (a random secret
is generated if you do not give it one).

```javascript
// Import an underlying elliptic curve library.
const ec = require('ecurve')
// Generate parameters for a curve.
const curve = ec.getCurveByName('secp256k1')
// An algorithm used to map data to elements in Z_q.
const hash = 'sha256'
// Construct a trusted accumulator.
const accumulator = new Accumulator(curve, hash)
```

The next class is [Prover](#Prover), which represents an untrusted party that is
able to compute proofs of membership for elements that have been accumulated. The
prover does not require knowledge of the secret stored by the accumulator.

```javascript
// Construct an untrusted prover.
const prover = new Prover(curve, hash)
```

When adding an element, the accumulator returns a witness that can be used to verify
its membership later.

```javascript
// Add an element.
const d1 = '1'
const u1 = accumulator.add(d1)
// Verify the result.
assert(accumulator.verify(u1))
```

The object returned from [Accumulator.add](#Accumulator+add) contains information that
the prover requires to compute witnesses. Pass it to [Prover.update](#Prover+update).

```javascript
// Update the prover with the result.
prover.update(u1)
```

Subsequent additions of elements invalidate the previously returned witnesses. 

```javascript
// Add a new element.
const d2 = '2'
const u2 = accumulator.add(d2)
// Verify the result.
assert(accumulator.verify(u2))
// Demonstrate that the witness for d1 is no longer valid.
assert(accumulator.verify(u1) === false)
```

As long as the prover is kept updated, it can compute valid witnesses for any
accumulated element.

```javascript
// Update the prover with the result.
prover.update(u2)
// Compute a new witness for d1.
const w1 = prover.prove(d1)
// Verify the result.
assert(accumulator.verify(w1))
```

An element can be deleted from the accumulator, which invalidates its witness.

```javascript
// Delete d1 from the accumulator.
const u3 = accumulator.del(w1)
// Demonstrate that the original witness is no longer valid.
assert(accumulator.verify(w1) === false)
```

The prover must be updated after a deletion as well.

```javascript
// Update prover with the result.
prover.update(u3)
// Compute a new witness for d2.
const w2 = prover.prove(d2)
// Verify the result.
assert(accumulator.verify(w2))
```

It will not, however, be able to prove the membership of deleted elements.

```javascript
// Compute a new witness for the deleted element.
const w3 = prover.prove(d1)
// Demonstrate that the new witness is not valid either.
assert(accumulator.verify(w3) === false)
```

# API Reference

## Accumulator

{{#class name="Accumulator"}}
{{>body~}}
{{>member-index~}}
{{>separator~}}
{{>members~}}
{{/class}}

## Prover

{{#class name="Prover"}}
{{>body~}}
{{>member-index~}}
{{>separator~}}
{{>members~}}
{{/class}}
